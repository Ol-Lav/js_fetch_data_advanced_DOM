{"version":3,"sources":["scripts/main.js"],"names":["phoneDetailsUrl","body","document","querySelector","getPhones","fetch","then","response","ok","Error","status","statusText","json","createElement","className","title","phoneName","insertAdjacentHTML","getFirstReceivedDetails","phone","Promise","race","item","name","getAllSuccessfulDetails","all","map","el","getThreeFastestDetails","filter","i","catch"],"mappings":";AAAA,aAGA,IAAMA,EAAkB,wEAClBC,EAAOC,SAASC,cAAc,QAE9BC,EAAY,WACTC,OAAAA,MAAML,GACVM,KAAK,SAACC,GACD,IAACA,EAASC,GACN,MAAA,IAAIC,MAASF,GAAAA,OAAAA,EAASG,OAAWH,MAAAA,OAAAA,EAASI,aAG3CJ,OAAAA,EAASK,UAItB,SAASC,EAAcC,EAAWC,EAAOC,GACvCf,EAAKgB,mBAAmB,aACRH,qBAAAA,OAAAA,EACNC,kBAAAA,OAAAA,EACDC,oBAAAA,OAAAA,EAHT,yBAQF,IAAME,EAA0B,WAC9Bd,IACGE,KAAK,SAAAa,GAASC,OAAAA,QAAQC,KAAKF,GACzBb,KAAK,SAAAgB,GACJT,EAAc,iBAAkB,iBAAqBS,GAAAA,OAAAA,EAAKC,YAK5DC,EAA0B,WAC9BpB,IACGE,KAAK,SAAAa,GAASC,OAAAA,QAAQK,IAAIN,GACxBb,KAAK,SAAAgB,GACJT,EAAc,iBAAkB,iBAAqBS,GAAAA,OAAAA,EAAKI,IACxD,SAAAC,GAAM,MAAA,OAASA,EAAGJ,cAOtBK,EAAyB,WAC7BxB,IACGE,KAAK,SAAAa,GAASC,OAAAA,QAAQK,IAAIN,GACxBb,KAAK,SAAAgB,GACJT,EAAc,gBAAiB,gBAAoBS,GAAAA,OAAAA,EAAKO,OACtD,SAACF,EAAIG,GAAMA,OAAAA,EAAI,IACdJ,IAAI,SAAAC,GAAM,MAAA,OAASA,EAAGJ,cAOjCnB,IACGE,KAAKY,GACLZ,KAAKkB,GACLlB,KAAKsB,GACLG","file":"main.9b5563bc.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// eslint-disable-next-line max-len\nconst phoneDetailsUrl = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst body = document.querySelector('body');\n\nconst getPhones = () => {\n  return fetch(phoneDetailsUrl)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nfunction createElement(className, title, phoneName) {\n  body.insertAdjacentHTML('afterbegin', `\n    <div class=\"${className}\">\n      <h3>${title}</h3>\n      <p>${phoneName}</p>\n    </div>\n  `);\n}\n\nconst getFirstReceivedDetails = () => {\n  getPhones()\n    .then(phone => Promise.race(phone)\n      .then(item => {\n        createElement('first-received', 'First Received', `${item.name}`);\n      })\n    );\n};\n\nconst getAllSuccessfulDetails = () => {\n  getPhones()\n    .then(phone => Promise.all(phone)\n      .then(item => {\n        createElement('all-successful', 'All Successful', `${item.map(\n          el => '<br>' + el.name)\n        }`\n        );\n      })\n    );\n};\n\nconst getThreeFastestDetails = () => {\n  getPhones()\n    .then(phone => Promise.all(phone)\n      .then(item => {\n        createElement('three-fastest', 'Three Fastest', `${item.filter(\n          (el, i) => i < 3)\n          .map(el => '<br>' + el.name)\n        }`\n        );\n      })\n    );\n};\n\ngetPhones()\n  .then(getFirstReceivedDetails)\n  .then(getAllSuccessfulDetails)\n  .then(getThreeFastestDetails)\n  .catch();\n"]}